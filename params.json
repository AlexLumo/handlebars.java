{"name":"Handlebars.java","tagline":"Logic-less and semantic templates with Java","body":"[![Build Status](https://secure.travis-ci.org/jknack/handlebars.java.png?branch=master)](https://travis-ci.org/jknack/handlebars.java)\r\n\r\n\r\nHandlebars.java - Logic-less and semantic templates with Java\r\n===============\r\nHandlebars.java is a Java port of [handlebars](http://handlebarsjs.com/).\r\n\r\nHandlebars provides the power necessary to let you build semantic templates effectively with no frustration.\r\n\r\n[Mustache](http://mustache.github.com/mustache.5.html) templates are compatible with Handlebars, so you can take a [Mustache](http://mustache.github.com) template, import it into Handlebars, and start taking advantage of the extra Handlebars features.\r\n\r\n# Getting Started\r\n In general, the syntax of **Handlebars** templates is a superset of [Mustache](http://mustache.github.com) templates. For basic syntax, check out the [Mustache manpage](http://mustache.github.com).\r\n\r\n## Maven\r\n#### Stable version: **0.12.0**\r\n\r\n\r\n```xml\r\n  <dependency>\r\n    <groupId>com.github.jknack</groupId>\r\n    <artifactId>handlebars</artifactId>\r\n    <version>${handlebars-version}</version>\r\n  </dependency>\r\n```\r\n \r\n#### Development version: **0.13.0-SNAPSHOT**\r\n\r\nSNAPSHOT versions are NOT synchronized to Central. If you want to use a snapshot version you need to add the https://oss.sonatype.org/content/repositories/snapshots/ repository to your pom.xml.\r\n\r\n## Hello Handlebars.java\r\n\r\n```java\r\nHandlebars handlebars = new Handlebars();\r\n\r\nTemplate template = handlebars.compile(\"Hello {{this}}!\");\r\n\r\nSystem.out.println(template.apply(\"Handlebars.java\"));\r\n```\r\n\r\nOutput:\r\n```\r\nHello Handlebars.java!\r\n```\r\n\r\n### Loading templates\r\nTemplates are loaded using the ```TemplateLoader``` class. Handlebars.java provides three implementations of a ```TemplateLodaer```:\r\n * ClassPathTemplateLoader (default)\r\n * FileTemplateLoader\r\n * SpringTemplateLoader (see the [handlebars-springmvc](https://github.com/jknack/handlebars.java/tree/master/handlebars-springmvc) module)\r\n\r\nThis example load ```mytemplate.hbs``` from the root of the classpath:\r\n\r\nmytemplate.hbs:\r\n```\r\nHello {{this}}!\r\n```\r\n\r\n```java\r\nHandlebars handlebars = new Handlebars();\r\n\r\nTemplate template = handlebars.compile(URI.create(\"mytemplate\"));\r\n\r\nSystem.out.println(template.apply(\"Handlebars.java\"));\r\n```\r\n\r\nOutput:\r\n```\r\nHello Handlebars.java!\r\n```\r\n\r\nYou can specicy a different ```TemplateLoader``` by:\r\n\r\n```java\r\nTemplateLoader loader = ...;\r\nHandlebars handlebars = new Handlebars(loader);\r\n```\r\n\r\n#### Templates prefix and suffix\r\nA ```TemplateLoader``` provides two important properties:\r\n * ```prefix```: useful for setting a default prefix where templates are stored.\r\n * ```suffix```: useful for setting a default suffix or file extension for your templates. Default is: ```.hbs```\r\n\r\nExample:\r\n```java\r\nTemplateLoader loader = new ClassPathTemplateLoader();\r\nloader.setPrefix(\"/templates\");\r\nloader.setSuffix(\".html\");\r\nHandlebars handlebars = new Handlebars(loader);\r\n\r\nTemplate template = handlebars.compile(URI.create(\"mytemplate\"));\r\n\r\nSystem.out.println(template.apply(\"Handlebars.java\"));\r\n```\r\n\r\nHandlebars.java will resolve ```mytemplate``` to ```/templates/mytemplate.html``` and load it.\r\n\r\n## The Handlebars.java Server\r\nThe handlebars.java server is small application where you can write Mustache/Handlebars template and merge them with data.\r\n\r\nIt is a useful tool for Web Designers.\r\n\r\nDownload from Maven Central:\r\n\r\n1. Go [here](http://search.maven.org/#search%7Cga%7C1%7Chandlebars-proto)\r\n2. Under the **Download** section click on **jar**\r\n\r\nMaven:\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.jknack</groupId>\r\n  <artifactId>handlebars-proto</artifactId>\r\n  <version>${current-version}</version>\r\n</dependency>\r\n```\r\n\r\nUsage:\r\n```java -jar handlebars-proto-${current-version}.jar -dir myTemplates```\r\n\r\nExample:\r\n\r\n**myTemplates/home.hbs**\r\n\r\n```\r\n<ul>\r\n {{#items}}\r\n {{name}}\r\n {{/items}}\r\n</ul>\r\n```\r\n\r\n**myTemplates/home.json**\r\n\r\n```json\r\n{\r\n  items: [\r\n    {\r\n      name: \"Handlebars.java rocks!\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nor if you prefer YAML **myTemplates/home.yml**:\r\n\r\n```yml\r\nlist:\r\n  - name: Handlebars.java rocks!\r\n```\r\n\r\n### Open a browser a type:\r\n```\r\nhttp://localhost:6780/home.hbs\r\n```\r\nenjoy it!\r\n\r\n\r\n### Additional options:\r\n\r\n* -dir: set the template directory\r\n* -prefix: set the template's prefix, default is /\r\n* -suffix: set the template's suffix, default is .hbs\r\n* -context: set the context's path, default is /\r\n* -port: set port number, default is 6780\r\n* -content-type: set the content-type header, default is text/html\r\n\r\n### Multiples data sources per template\r\nSometimes you need or want to test multiples datasets over a single template, you can do that by setting a ```data``` parameter in the request URI.\r\n\r\nExample:\r\n\r\n```\r\nhttp://localhost:6780/home.hbs?data=mytestdata\r\n```\r\nPlease note you don't have to specified the extension file.\r\n\r\n## Helpers\r\n\r\n### Built-in helpers:\r\n * **with**\r\n * **each**\r\n * **if**\r\n * **unless**\r\n * **log**\r\n * **block**\r\n * **partial**\r\n * **precompile**\r\n * **embedded**\r\n * **i18n** and **i18nJs** \r\n\r\n### with, each, if, unless:\r\n See the [built-in helper documentation](http://handlebarsjs.com/block_helpers.html).\r\n\r\n### block and partial\r\n Block and partial helpers work together to provide you [Template Inheritance](http://thejohnfreeman.com/blog/2012/03/23/template-inheritance-for-handlebars.html).\r\n\r\nUsage:\r\n```\r\n  {{#block \"title\"}}\r\n    ...\r\n  {{/block}}\r\n```\r\ncontext: A string literal which define the region's name.\r\n\r\nUsage:\r\n```\r\n  {{#partial \"title\"}}\r\n    ...\r\n  {{/partial}}\r\n```\r\ncontext: A string literal which define the region's name.\r\n\r\n### precompile\r\n Precompile a Handlebars.java template to JavaScript using handlebars.js\r\n\r\nuser.hbs\r\n\r\n```html\r\nHello {{this}}!\r\n```\r\n\r\nhome.hbs\r\n\r\n```html\r\n<script type=\"text/javascript\">\r\n{{precompile \"user\"}}\r\n</script>\r\n```\r\n\r\nOutput:\r\n```html\r\n<script type=\"text/javascript\">\r\n(function() {\r\n  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};\r\ntemplates['user.hbs'] = template(function (Handlebars,depth0,helpers,partials,data) {\r\n  helpers = helpers || Handlebars.helpers;\r\n  var buffer = \"\", functionType=\"function\", escapeExpression=this.escapeExpression;\r\n\r\n\r\n  buffer += \"Hi \";\r\n  depth0 = typeof depth0 === functionType ? depth0() : depth0;\r\n  buffer += escapeExpression(depth0) + \"!\";\r\n  return buffer;});\r\n})();\r\n</script>\r\n```\r\nYou can access to the precompiled template by:\r\n\r\n```js\r\nvar template = Handlebars.templates['user.hbs']\r\n```\r\n\r\nFor more information have a look at [Precompiling Templates](https://github.com/wycats/handlebars.js/) documentation\r\n\r\nUsage:\r\n```\r\n{{precompile \"template\" [wrapper=\"anonymous, amd or none\"]}}\r\n```\r\ncontext: A template name. Required.\r\n\r\nwrapper: One of \"anonymous\", \"amd\" or \"none\". Default is: \"anonymous\" \r\n\r\n### embedded\r\n The embedded helper allow you to \"embedded\" a handlebars template inside a ```<script>``` HTML tag:\r\n\r\nuser.hbs\r\n\r\n```html\r\n<tr>\r\n  <td>{{firstName}}</td>\r\n  <td>{{lastName}}</td>\r\n</tr>\r\n```\r\n\r\nhome.hbs\r\n\r\n```html\r\n<html>\r\n...\r\n{{embedded \"user\"}}\r\n...\r\n</html>\r\n```\r\nOutput:\r\n```html\r\n<html>\r\n...\r\n<script id=\"user-hbs\" type=\"text/x-handlebars\">\r\n<tr>\r\n  <td>{{firstName}}</td>\r\n  <td>{{lastName}}</td>\r\n</tr>\r\n</script>\r\n...\r\n</html>\r\n```\r\n\r\nUsage:\r\n```\r\n{{embedded \"template\"}}\r\n```\r\ncontext: A template name. Required.\r\n\r\n### i18n\r\n A helper built on top of a {@link ResourceBundle}. A {@link ResourceBundle} is the most well known mechanism for internationalization (i18n) in Java.\r\n\r\nUsage:\r\n\r\n```html\r\n{{i18n \"hello\"}}\r\n```\r\nThis require a ```messages.properties``` in the root of classpath.\r\n\r\nUsing a locale:\r\n\r\n```html\r\n{{i18n \"hello\" locale=\"es_AR\"}}\r\n```\r\n\r\nThis require a ```messages_es_AR.properties``` in the root of classpath.\r\n\r\nUsing a different bundle:\r\n\r\n```html\r\n{{i18n \"hello\" bundle=\"myMessages\"}}\r\n```\r\nThis require a ```myMessages.properties``` in the root of classpath.\r\n\r\nUsing a message format:\r\n\r\n```html\r\n{{i18n \"hello\" \"Handlebars.java\"}}\r\n```\r\n\r\nWhere ```hello``` is ```Hola {0}!```, results in ```Hola Handlebars.java!```.\r\n\r\n### i18nJs\r\n Translate a ```ResourceBundle``` into JavaScript code. The generated code assume you have the [I18n](https://github.com/fnando/i18n-js) in your application.\r\n\r\nUsage:\r\n\r\n```\r\n{{i18nJs [locale] [bundle=messages]}}\r\n```\r\n\r\nIf locale argument is present it will translate that locale to JavaScript. Otherwise, the default locale.\r\n\r\nThe generated code looks like:\r\n\r\n```javascript\r\n<script type=\"text/javascript\">\r\n  I18n.defaultLocale = 'es_AR';\r\n  I18n.locale = 'es_AR';\r\n  I18n.translations = I18n.translations || {};\r\n  // Spanish (Argentina)\r\n  I18n.translations['es_AR'] = {\r\n    \"hello\": \"Hi {{arg0}}!\"\r\n  }\r\n</script>\r\n```\r\n\r\nFinally, it converts message patterns like: ```Hi {0}``` into ```Hi {{arg0}}```. This make possible to the [I18n](https://github.com/fnando/i18n-js) JS library to interpolate variables.\r\n\r\n### TypeSafe Templates\r\n TypeSafe templates are created by extending the ```TypeSafeTemplate``` interface. For example:\r\n\r\n```java\r\n\r\n// 1\r\npublic static interface UserTemplate extends TypeSafeTemplate<User> {\r\n\r\n  // 2\r\n  public UserTemplate setAge(int age);\r\n\r\n  public UserTemplate setRole(String role);\r\n\r\n}\r\n\r\n// 3\r\nUserTemplate userTmpl = handlebars.compile(\"{{name}} is {{age}} years old!\")\r\n  .as(UserTemplate.class);\r\n\r\nuserTmpl.setAge(32);\r\n\r\nassertEquals(\"Edgar is 32 years old!\", userTmpl.apply(new User(\"Edgar\")));\r\n```\r\n\r\n 1. You extend the ```TypeSafeTemplate``` interface.\r\n 2. You add all the set method you need. The set method can returns ```void``` or ```TypeSafeTemplate``` object.\r\n 3. You create a new type safe template using the: ```as()``` method.\r\n\r\n### Registering Helpers\r\n\r\nThere are two ways of registering helpers.\r\n\r\n#### Using the ```Helper``` interface\r\n \r\n```java\r\nhandlebars.registerHelper(\"blog\", new Helper<Blog>() {\r\n  public CharSequence apply(Blog blog, Options options) {\r\n    return options.fn(blog);\r\n  }\r\n});\r\n```\r\n\r\n```java\r\nhandlebars.registerHelper(\"blog-list\", new Helper<List<Blog>>() {\r\n  public CharSequence apply(List<Blog> list, Options options) {\r\n    String ret = \"<ul>\";\r\n    for (Blog blog: list) {\r\n      ret += \"<li>\" + options.fn(blog) + \"</li>\";\r\n    }\r\n    return new Handlebars.SafeString(ret + \"</ul>\");\r\n  }\r\n});\r\n```\r\n\r\n#### Using a ```HelperSource```\r\nA helper source is any class with public methods returning an instance of a ```CharSequence```.\r\n\r\n```java\r\n  public static? CharSequence methodName(context?, parameter*, options?) {\r\n  }\r\n```\r\n\r\nWhere: \r\n\r\n* A method can/can't be static\r\n* The method's name became the helper's name\r\n* Context, parameters and options are all optionals\r\n* If context and options are present they must be the **first** and **last** arguments of the method\r\n\r\nAll these are valid definitions of helper methods:\r\n\r\n```java\r\npublic class HelperSource {\r\n  public String blog(Blog blog, Options options) {\r\n    return options.fn(blog);\r\n  }\r\n\r\n  public static String now() {\r\n    return new Date().toString();\r\n  }\r\n\r\n  public String render(Blog context, String param0, int param1, boolean param2, Options options) {\r\n    return ...\r\n  }\r\n}\r\n\r\n...\r\n\r\nhandlebars.registerHelpers(new HelperSource());\r\n\r\n```\r\n\r\nOr, if you prefer static methods only:\r\n\r\n\r\n```java\r\nhandlebars.registerHelpers(HelperSource.class);\r\n\r\n```\r\n\r\n\r\n### Helper Options\r\n\r\n#### Parameters\r\n```java\r\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\r\n  public CharSequence apply(List<Blog> list, Options options) {\r\n    String p0 = options.param(0);\r\n    assertEquals(\"param0\", p0);\r\n    Integer p1 = options.param(1);\r\n    assertEquals(123, p1);\r\n    ...\r\n  }\r\n});\r\n\r\nBean bean = new Bean();\r\nbean.setParam1(123);\r\n\r\nTemplate template = handlebars.compile(\"{{#blog-list blogs \\\"param0\\\" param1}}{{/blog-list}}\");\r\ntemplate.apply(bean);\r\n```\r\n\r\n#### Default parameters\r\n```java\r\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\r\n  public CharSequence apply(List<Blog> list, Options options) {\r\n    String p0 = options.param(0, \"param0\");\r\n    assertEquals(\"param0\", p0);\r\n    Integer p1 = options.param(1, 123);\r\n    assertEquals(123, p1);\r\n    ...\r\n  }\r\n});\r\n\r\nTemplate template = handlebars.compile(\"{{#blog-list blogs}}{{/blog-list}}\");\r\n```\r\n\r\n#### Hash\r\n```java\r\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\r\n  public CharSequence apply(List<Blog> list, Options options) {\r\n    String class = options.hash(\"class\");\r\n    assertEquals(\"blog-css\", class);\r\n    ...\r\n  }\r\n});\r\n\r\nhandlebars.compile(\"{{#blog-list blogs class=\\\"blog-css\\\"}}{{/blog-list}}\");\r\n```\r\n\r\n#### Default hash\r\n```java\r\nhandlebars.registerHelper(\"blog-list\", new Helper<Blog>() {\r\n  public CharSequence apply(List<Blog> list, Options options) {\r\n    String class = options.hash(\"class\", \"blog-css\");\r\n    assertEquals(\"blog-css\", class);\r\n    ...\r\n  }\r\n});\r\n\r\nhandlebars.compile(\"{{#blog-list blogs}}{{/blog-list}}\");\r\n```\r\n## Error reporting\r\n\r\n### Syntax errors\r\n\r\n```\r\nfile:line:column: message\r\n   evidence\r\n   ^\r\n[at file:line:column]\r\n```\r\n\r\nExamples:\r\n\r\ntemplate.hbs\r\n```\r\n{{value\r\n```\r\n\r\n```\r\n/templates.hbs:1:8: found 'eof', expected: 'id', 'parameter', 'hash' or '}'\r\n    {{value\r\n           ^\r\n```\r\n\r\nIf a partial isn't found or if has errors, a call stack is added\r\n\r\n```\r\n/deep1.hbs:1:5: The partial '/deep2.hbs' could not be found\r\n    {{> deep2\r\n        ^\r\nat /deep1.hbs:1:10\r\nat /deep.hbs:1:10\r\n```\r\n### Helper/Runtime errors\r\nHelper or runtime errors are similar to syntax errors, except for two thing:\r\n\r\n1. The location of the problem may (or may not) be the correct one.\r\n2. The stack-trace isn't available\r\n\r\nExamples:\r\n\r\nBlock helper:\r\n\r\n```java\r\npublic CharSequence apply(final Object context, final Options options) throws IOException {\r\n  if (context == null) {\r\n    throw new IllegalArgumentException(\r\n        \"found 'null', expected 'string'\");\r\n  }\r\n  if (!(context instanceof String)) {\r\n    throw new IllegalArgumentException(\r\n        \"found '\" + context + \"', expected 'string'\");\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\nbase.hbs\r\n```\r\n\r\n{{#block}} {{/block}}\r\n```\r\n\r\nHandlebars.java reports:\r\n```\r\n/base.hbs:2:4: found 'null', expected 'string'\r\n    {{#block}} ... {{/block}}\r\n```\r\n\r\nIn short from a helper you can throw an Exception and Handlebars.java will add the filename, line, column and the evidence.\r\n\r\n## Advanced Usage\r\n\r\n### Extending the context stack\r\n Let's say you need to access to the current logged-in user in every single view/page.\r\n You can publishing the current logged in user by hooking into the context-stack. See it in action:\r\n ```java\r\n  hookContextStack(Object model, Template template) {\r\n    User user = ....;// Get the logged-in user from somewhere\r\n    Map moreData = ...;\r\n    Context context = Context\r\n      .newBuilder(model)\r\n        .combine(\"user\", user)\r\n        .combine(moreData)\r\n        .build();\r\n    template.apply(user);\r\n    context.destroy();\r\n  }\r\n ```\r\n Where is the ```hookContextStack``` method? Well, it depends on your application architecture.\r\n\r\n### Using the ValueResolver\r\n By default, Handlebars.java use the JavaBean methods (i.e. public getXxx methods) and Map as value resolvers.\r\n \r\n You can choose a different value resolver. This section describe how to do it.\r\n \r\n#### The JavaBeanValueResolver\r\n Resolves values from public methods prefixed with \"get/is\"\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(JavaBeanValueResolver.INSTANCE)\r\n  .build();\r\n```\r\n\r\n#### The FieldValueResolver\r\n Resolves values from  no-static fields.\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(FieldValueResolver.INSTANCE)\r\n  .build();\r\n```\r\n\r\n#### The MapValueResolver\r\n Resolves values from a ```java.util.Map``` objects.\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(MapValueResolver.INSTANCE)\r\n  .build();\r\n```\r\n\r\n#### The MethodValueResolver\r\n Resolves values from public methods.\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(MethodValueResolver.INSTANCE)\r\n  .build();\r\n```\r\n\r\n#### The JsonNodeValueResolver\r\n Resolves values from ```JsonNode``` objects.\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(JsonNodeValueResolver.INSTANCE)\r\n  .build();\r\n```\r\n\r\nAvailable in [Jackson 1.x](https://github.com/jknack/handlebars.java/tree/master/handlebars-json) and [Jackson 2.x](https://github.com/jknack/handlebars.java/tree/master/handlebars-jackson2) modules.\r\n\r\n#### Using multiples value resolvers\r\n\r\n```java\r\nContext context = Context\r\n  .newBuilder(model)\r\n  .resolver(\r\n      MapValueResolver.INSTANCE,\r\n      JavaBeanValueResolver.INSTANCE,\r\n      FieldValueResolver.INSTANCE\r\n  ).build();\r\n```\r\n\r\n### The Cache System\r\n The cache system is designed to provide scalability and flexibility. Here is a quick view of the ```TemplateCache``` system:\r\n\r\n```java\r\n public interface TemplateCache {\r\n\r\n  /**\r\n   * Remove all mappings from the cache.\r\n   */\r\n  void clear();\r\n\r\n  /**\r\n   * Evict the mapping for this source from this cache if it is present.\r\n   *\r\n   * @param source the source whose mapping is to be removed from the cache\r\n   */\r\n  void evict(TemplateSource source);\r\n\r\n  /**\r\n   * Return the value to which this cache maps the specified key.\r\n   *\r\n   * @param source source whose associated template is to be returned.\r\n   * @param parser The Handlebars parser.\r\n   * @return A template.\r\n   * @throws IOException If input can't be parsed.\r\n   */\r\n  Template get(TemplateSource source, Parser parser) throws IOException;\r\n}\r\n```\r\n\r\nAs you can see, there isn't a ```put``` method. So all the hard work is done in the ```get``` method, which is basically the core of the cache system.\r\n\r\nBy default, Handlebars.java use a ```null``` cache implementation (a.k.a. no cache at all) which looks like:\r\n\r\n```\r\nTemplate get(TemplateSource source, Parser parser) throws IOException {\r\n  return parser.parse(source);\r\n}\r\n```\r\n\r\nBeside the ```null``` cache Handlebars.java provides three more implementations:\r\n\r\n1. ```ConcurrentMapTemplateCache```: a template cache implementation built on top of a ```ConcurrentMap```.\r\n2. ```HighConcurrencyTemplateCache```: a template cache implementation built on top of ```ConcurrentMap``` with all the design techniques described in [Java Concurrency in Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601)\r\n3. ```GuavaTemplateCache```: a template cache implementation built on top of [Google Guava](https://code.google.com/p/guava-libraries/wiki/CachesExplained). Available in [handlebars-guava-cache module](https://github.com/jknack/handlebars.java/tree/master/handlebars-guava-cache)\r\n\r\nThese two implementations are able to detect files changes and reload them in an efficient way.\r\n\r\nFinally, you can configure Handlebars.java to use a cache by:\r\n\r\n```\r\nHandlebars hbs = new Handlebars()\r\n  .with(new MyCache());\r\n```\r\n\r\n### Using a MissingValueResolver\r\n A ```MissingValueResolver``` let you use default values for ```{{variable}}``` expressions resolved to ```null```.\r\n \r\n```java\r\n  MissingValueResolver missingValueResolver = new MissingValueResolver() {\r\n    public String resolve(Object context, String name) {\r\n      //return a default value or throw an exception\r\n      ...;\r\n    }\r\n  };\r\n  Handlebars handlebars = new Handlebars().with(missingValueResolver);\r\n```\r\n\r\n### Helper Missing\r\n By default, Handlebars.java throws an ```java.lang.IllegalArgumentException()``` if a helper cannot be resolved.\r\n You can override the default behaviour by providing a ```helperMissing``` helper. Example:\r\n\r\n```java\r\n  handlebars.registerHelper(Handlebars.HELPER_MISSING, new Helper<Object>() {\r\n    @Override\r\n    public CharSequence apply(final Object context, final Options options) throws IOException {\r\n      return options.fn.text();\r\n    }\r\n  });\r\n```\r\n\r\n### String form parameters\r\n You can access to a parameter name if you set the: ```stringParams: true```. Example:\r\n \r\n```html\r\n{{sayHi this edgar}}\r\n```\r\n\r\n```java\r\n  Handlebars handlebars = new Handlebars();\r\n  handlebars.setStringParams(true);\r\n  \r\n  handlebars.registerHelper(\"sayHi\", new Helper<Object>() {\r\n    public Object apply(Object context, Options options) {\r\n      return \"Hello \" + options.param(0) + \"!\";\r\n    }\r\n  });\r\n```\r\n\r\nresults in:\r\n```\r\nHello edgar!\r\n```\r\n How it works? ```stringParams: true``` instruct Handlebars.java to resolve a parameter\r\n to his name if the value isn't present in the context stack.\r\n\r\n### Allow Infite loops\r\n By default, Handlebars.java don't allow a partial to call him self (directly or indirectly).\r\n You can change this by setting the: ```Handlebars.setAllowInifiteLoops``` to ```true```, just avoid ```StackOverflowError```.\r\n\r\n### Pretty Whitspaces\r\n The Mustache Spec has some rules for removing spaces and new lines, by default, this feature is off.\r\n You can turn on this by setting the: ```Handlebars.setPrettyWhitespaces``` to ```true```.\r\n\r\n# Additional Helpers\r\n## String Helpers\r\n Functions like abbreviate, capitalize, join, dateFormat, yesno, etc., are available from [StringHelpers] (https://github.com/jknack/handlebars.java/blob/master/handlebars/src/main/java/com/github/jknack/handlebars/StringHelpers.java).\r\n \r\n### Usage:\r\n```java\r\n StringHelpers.register(handlebars);\r\n```\r\n\r\n## Jackson 1.x\r\n\r\nMaven:\r\n```xml\r\n <dependency>\r\n   <groupId>com.github.jknack</groupId>\r\n   <artifactId>handlebars-json</artifactId>\r\n   <version>${handlebars-version}</version>\r\n </dependency>\r\n\r\n```\r\nUsage:\r\n\r\n```java\r\n handlebars.registerHelper(\"json\", JacksonHelper.INSTANCE);\r\n```\r\n```\r\n {{json context [view=\"foo.MyFullyQualifiedClassName\"]}}\r\n```\r\n\r\nAlternative:\r\n```java\r\n handlebars.registerHelper(\"json\", new JacksonHelper().viewAlias(\"myView\",\r\n   foo.MyFullyQualifiedClassName.class);\r\n```\r\n```\r\n {{json context [view=\"myView\"]}}\r\n```\r\n\r\ncontext: An object, may be null.\r\n\r\nview: The name of the [Jackson View](http://wiki.fasterxml.com/JacksonJsonViews). Optional.\r\n\r\n## Jackson 2.x\r\n\r\nMaven:\r\n```xml\r\n <dependency>\r\n   <groupId>com.github.jknack</groupId>\r\n   <artifactId>handlebars-jackson2</artifactId>\r\n   <version>${handlebars-version}</version>\r\n </dependency>\r\n```\r\n\r\nSame as Jackson1.x, except for the name of the helper: ```Jackson2Helper```\r\n\r\n## Markdown\r\n\r\nMaven:\r\n```xml\r\n <dependency>\r\n   <groupId>com.github.jknack</groupId>\r\n   <artifactId>handlebars-markdown</artifactId>\r\n   <version>${handlebars-version}</version>\r\n </dependency>\r\n```\r\nUsage:\r\n\r\n```java\r\n handlebars.registerHelper(\"md\", new MarkdownHelper());\r\n```\r\n```\r\n {{md context}}\r\n```\r\ncontext: An object or null. Required.\r\n\r\n## Humanize\r\n\r\nMaven:\r\n```xml\r\n <dependency>\r\n   <groupId>com.github.jknack</groupId>\r\n   <artifactId>handlebars-humanize</artifactId>\r\n   <version>${handlebars-version}</version>\r\n </dependency>\r\n```\r\nUsage:\r\n\r\n```java\r\n // Register all the humanize helpers.\r\n HumanizeHelper.register(handlebars);\r\n```\r\n\r\nSee the JavaDoc of the [HumanizeHelper] (https://github.com/jknack/handlebars.java/blob/master/handlebars-humanize/src/main/java/com/github/jknack/handlebars/HumanizeHelper.java) for more information.\r\n\r\n# Modules\r\n## SpringMVC\r\n\r\nMaven:\r\n```xml\r\n <dependency>\r\n   <groupId>com.github.jknack</groupId>\r\n   <artifactId>handlebars-springmvc</artifactId>\r\n   <version>${handlebars-version}</version>\r\n </dependency>\r\n```\r\n\r\nUsing value resolvers:\r\n\r\n```java\r\n HandlebarsViewResolver viewResolver = ...;\r\n\r\n viewResolver.setValueResolvers(...);\r\n```\r\n\r\nIn addition, the HandlebarsViewResolver add a ```message``` helper that uses the Spring ```MessageSource``` class:\r\n\r\n```\r\n{{message \"code\" [arg]* [default=\"default message\"]}}\r\n```\r\n\r\nwhere:\r\n* code: the message's code. Required.\r\n* arg:  the message's argument. Optional.\r\n* default: the default's message. Optional.\r\n\r\nCheckout the [HandlebarsViewResolver](https://github.com/jknack/handlebars.java/blob/master/handlebars-springmvc/src/main/java/com/github/jknack/handlebars/springmvc/HandlebarsViewResolver.java).\r\n\r\n# Architecture and API Design\r\n * Handlebars.java follows the JavaScript API with some minors exceptions due to the nature of the Java language.\r\n * The parser is built on top of [ANTLR v4] (http://www.antlr.org/).\r\n * Data is provided as primitive types (int, boolean, double, etc.), strings, maps, list or JavaBeans objects.\r\n * Helpers are type-safe.\r\n * Handlebars.java is thread-safe.\r\n\r\n## Differences between Handlebars.java and Handlebars.js\r\n Handlebars.java scope resolution follows the Mustache Spec. For example:\r\n\r\nGiven:\r\n\r\n```json\r\n{\r\n  \"value\": \"parent\",\r\n  \"child\": {\r\n  }\r\n}\r\n```\r\nand\r\n\r\n```html\r\nHello {{#child}}{{value}}{{/child}}\r\n```\r\n\r\nwill be:\r\n\r\n```html\r\nHello parent\r\n```\r\n\r\nNow, the same model and template with Handlebars.js is:\r\n\r\n```html\r\nHello \r\n```\r\nThat is because Handlebars.js don't look in the context stack for missing attribute in the current scope (as the Mustache Spec says).\r\n\r\nHopefully, you can turn-off the context stack lookup in Handlebars.java by qualifying the attribute with ```this.```:\r\n\r\n```html\r\nHello {{#child}}{{this.value}}{{/child}}\r\n```\r\n\r\n## Differences between Handlebars.java and Mustache.js\r\n * Handlebars.java throws a ```java.io.FileNotFoundException``` if a partial cannot be loaded.\r\n\r\n## Status\r\n### Mustache 1.0 Compliant\r\n * Passes the 123 tests from the [Mustache Spec](https://github.com/mustache/spec).\r\n * Tests can be found here [comments.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/CommentsTest.java), [delimiters.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/DelimitersTest.java), [interpolation.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/InterpolationTest.java), [inverted.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/InvertedTest.java), [lambdas.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/LambdasTest.java), [partials.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/PartialsTest.java), [sections.yml](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/specs/SectionsTest.java)\r\n\r\n### Handlebars.js Compliant\r\n  * Passes all the [Handlebars.js tests](https://github.com/wycats/handlebars.js/blob/master/spec/qunit_spec.js)\r\n  * Tests can be found here [basic context](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/BasicContextTest.java), [string literals](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/StringLiteralParametersTest.java), [inverted sections](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/InvertedSectionTest.java), [blocks](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/BlockTest.java), [block helper missing](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/BlockHelperMissingTest.java), [helper hash](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/HelperHashTest.java), [partials](https://github.com/jknack/handlebars.java/blob/master/handlebars/src/test/java/hbs/js/PartialsTest.java)\r\n  \r\n## Dependencies\r\n\r\n```text\r\n+- org.apache.commons:commons-lang3:jar:3.1\r\n+- org.antlr:antlr4-runtime:jar:4.0\r\n+- org.mozilla:rhino:jar:1.7R4\r\n+- org.slf4j:slf4j-api:jar:1.6.4\r\n```\r\n\r\n## FAQ\r\n\r\n## Want to contribute?\r\n* Fork the project on Github.\r\n* Wandering what to work on? See task/bug list and pick up something you would like to work on.\r\n* Create an issue or fix one from [issues list](https://github.com/jknack/handlebars.java/issues).\r\n* If you know the answer to a question posted to our [mailing list](https://groups.google.com/forum/#!forum/handlebarsjava) - don't hesitate to write a reply.\r\n* Share your ideas or ask questions on [mailing list](https://groups.google.com/forum/#!forum/handlebarsjava) - don't hesitate to write a reply - that helps us improve javadocs/FAQ.\r\n* If you miss a particular feature - browse or ask on the [mailing list](https://groups.google.com/forum/#!forum/handlebarsjava) - don't hesitate to write a reply, show us a sample code and describe the problem.\r\n* Write a blog post about how you use or extend handlebars.java.\r\n* Please suggest changes to javadoc/exception messages when you find something unclear.\r\n* If you have problems with documentation, find it non intuitive or hard to follow - let us know about it, we'll try to make it better according to your suggestions. Any constructive critique is greatly appreciated. Don't forget that this is an open source project developed and documented in spare time.\r\n\r\n## Help and Support\r\n [Help and discussion](https://groups.google.com/forum/#!forum/handlebarsjava)\r\n\r\n [Bugs, Issues and Features](https://github.com/jknack/handlebars.java/issues)\r\n\r\n## Related Projects\r\n * [Handlebars.js](http://handlebarsjs.com/)\r\n * [Try Handlebars.js](http://tryhandlebarsjs.com/)\r\n * [Mustache](mustache.github.com)\r\n * [Humanize](https://github.com/mfornos/humanize)\r\n * [ANTLRv4](http://http://www.antlr.org/)\r\n\r\n## Author\r\n [Edgar Espina] (https://twitter.com/edgarespina)\r\n\r\n## License\r\n[Apache License 2](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}